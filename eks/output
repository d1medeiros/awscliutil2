[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mdata.aws_ami.eks_default_arm: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mmodule.ebs_kms_key.data.aws_partition.current[0]: Reading...[0m[0m
[0m[1mmodule.ebs_kms_key.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current[0]: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.ebs_kms_key.data.aws_caller_identity.current[0]: Reading...[0m[0m
[0m[1mdata.aws_ami.eks_default: Reading...[0m[0m
[0m[1mdata.aws_ami.eks_default_bottlerocket: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.cni_ipv6_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.cni_ipv6_policy[0]: Read complete after 0s [id=5099659][0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current[0]: Read complete after 0s [id=301261400751][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 0s [id=arn:aws:iam::301261400751:user/ddevops][0m
[0m[1mmodule.ebs_kms_key.data.aws_caller_identity.current[0]: Read complete after 0s [id=301261400751][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_ami.eks_default_bottlerocket: Read complete after 0s [id=ami-0f623fc60e44e28fc][0m
[0m[1mdata.aws_ami.eks_default: Read complete after 0s [id=ami-0b047bdfc83a5c3f4][0m
[0m[1mdata.aws_ami.eks_default_arm: Read complete after 0s [id=ami-001e0a4de4c601f93][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["efa"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["efa"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["efa"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_ssm_parameter.ami[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_ssm_parameter.ami[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_default"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["default_node_group"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["efa"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["custom_ami"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["complete"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_custom"].data.aws_caller_identity.current: Read complete after 0s [id=301261400751][0m
[0m[1mmodule.eks.module.eks_managed_node_group["bottlerocket_add"].data.aws_ssm_parameter.ami[0]: Read complete after 0s [id=/aws/service/bottlerocket/aws-k8s-1.29/x86_64/latest/image_version][0m
[0m[1mmodule.eks.module.eks_managed_node_group["al2023_nodeadm"].data.aws_ssm_parameter.ami[0]: Read complete after 0s [id=/aws/service/eks/optimized-ami/1.29/amazon-linux-2023/x86_64/standard/recommended/release_version][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # aws_iam_policy.node_additional[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "node_additional" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Example usage of node additional policy"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "ex-eks-additional"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:Describe*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
    }

[1m  # aws_iam_role.this["multiple"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "Example"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ex-multiple"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role.this["single"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "Example"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "ex-single"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_security_group.remote_access[0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "remote_access" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "Allow remote SSH access"
      [32m+[0m[0m egress                 = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "0.0.0.0/0",
                ]
              [32m+[0m[0m description      = ""
              [32m+[0m[0m from_port        = 0
              [32m+[0m[0m ipv6_cidr_blocks = [
                  [32m+[0m[0m "::/0",
                ]
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "-1"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 0
            },
        ]
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = [
          [32m+[0m[0m {
              [32m+[0m[0m cidr_blocks      = [
                  [32m+[0m[0m "10.0.0.0/8",
                ]
              [32m+[0m[0m description      = "SSH access"
              [32m+[0m[0m from_port        = 22
              [32m+[0m[0m ipv6_cidr_blocks = []
              [32m+[0m[0m prefix_list_ids  = []
              [32m+[0m[0m protocol         = "tcp"
              [32m+[0m[0m security_groups  = []
              [32m+[0m[0m self             = false
              [32m+[0m[0m to_port          = 22
            },
        ]
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ex-eks-remote-access"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-remote"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-remote"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.ebs_kms_key.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:user/ddevops",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyServiceRolesASG"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CreateGrant",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyServiceRolesASGPersistentVol"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "Bool"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "true",
                ]
              [32m+[0m[0m variable = "kms:GrantIsForAWSResource"
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling",
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.ebs_kms_key.aws_kms_alias.this["eks/ex-eks/ebs"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/ex-eks/ebs"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.ebs_kms_key.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "Customer managed key to encrypt EKS managed node group volumes"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
    }

[1m  # module.eks.data.aws_eks_addon_version.this["coredns"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "coredns"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["kube-proxy"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "kube-proxy"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/ex-eks/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "/aws/eks/ex-eks/cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "/aws/eks/ex-eks/cluster"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Example"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Example"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "ex-eks"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["GithubOrg"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "GithubOrg"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "terraform-aws-modules"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["GithubRepo"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "GithubRepo"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "terraform-aws-eks"
    }

[1m  # module.eks.aws_eks_access_entry.this["cluster_creator"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "ex-eks"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::301261400751:user/ddevops"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_entry.this["ex-multiple"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "ex-eks"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_entry.this["ex-single"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "ex-eks"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = (known after apply)
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.eks.aws_eks_access_policy_association.this["cluster_creator_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "ex-eks"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::301261400751:user/ddevops"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_access_policy_association.this["ex-multiple_ex-one"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "ex-eks"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSEditPolicy"
      [32m+[0m[0m principal_arn = (known after apply)

      [32m+[0m[0m access_scope {
          [32m+[0m[0m namespaces = [
              [32m+[0m[0m "default",
            ]
          [32m+[0m[0m type       = "namespace"
        }
    }

[1m  # module.eks.aws_eks_access_policy_association.this["ex-multiple_ex-two"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "ex-eks"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy"
      [32m+[0m[0m principal_arn = (known after apply)

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.eks.aws_eks_access_policy_association.this["ex-single_single"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "ex-eks"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy"
      [32m+[0m[0m principal_arn = (known after apply)

      [32m+[0m[0m access_scope {
          [32m+[0m[0m namespaces = [
              [32m+[0m[0m "default",
            ]
          [32m+[0m[0m type       = "namespace"
        }
    }

[1m  # module.eks.aws_eks_addon.before_compute["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "before_compute" {
      [32m+[0m[0m addon_name                  = "vpc-cni"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "ex-eks"
      [32m+[0m[0m configuration_values        = jsonencode(
            {
              [32m+[0m[0m env = {
                  [32m+[0m[0m ENABLE_PREFIX_DELEGATION = "true"
                  [32m+[0m[0m WARM_PREFIX_TARGET       = "1"
                }
            }
        )
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["coredns"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "coredns"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "ex-eks"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_addon.this["kube-proxy"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "this" {
      [32m+[0m[0m addon_name                  = "kube-proxy"
      [32m+[0m[0m addon_version               = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m cluster_name                = "ex-eks"
      [32m+[0m[0m configuration_values        = (known after apply)
      [32m+[0m[0m created_at                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m modified_at                 = (known after apply)
      [32m+[0m[0m preserve                    = true
      [32m+[0m[0m resolve_conflicts_on_create = "OVERWRITE"
      [32m+[0m[0m resolve_conflicts_on_update = "OVERWRITE"
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m name                      = "ex-eks"
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Example"               = "ex-eks"
          [32m+[0m[0m "GithubOrg"             = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"            = "terraform-aws-eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Example"               = "ex-eks"
          [32m+[0m[0m "GithubOrg"             = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"            = "terraform-aws-eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m version                   = "1.29"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv6"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-eks-irsa"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-eks-irsa"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
      [32m+[0m[0m name_prefix = "ex-eks-cluster-ClusterEncryption"
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
    }

[1m  # module.eks.aws_iam_policy.cni_ipv6_policy[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cni_ipv6_policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "IAM policy for EKS CNI to assign IPV6 addresses"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeInstanceTypes",
                          [32m+[0m[0m "ec2:AssignIpv6Addresses",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "AssignDescribe"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:CreateTags"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:ec2:*:*:network-interface/*"
                      [32m+[0m[0m Sid      = "CreateTags"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "ex-eks-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "ex-eks-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ex-eks-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-cluster"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "ex-eks-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"                      = "ex-eks"
          [32m+[0m[0m "GithubOrg"                    = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                   = "terraform-aws-eks"
          [32m+[0m[0m "Name"                         = "ex-eks-node"
          [32m+[0m[0m "kubernetes.io/cluster/ex-eks" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"                      = "ex-eks"
          [32m+[0m[0m "GithubOrg"                    = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                   = "terraform-aws-eks"
          [32m+[0m[0m "Name"                         = "ex-eks-node"
          [32m+[0m[0m "kubernetes.io/cluster/ex-eks" = "owned"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m ipv6_cidr_blocks         = [
          [32m+[0m[0m "::/0",
        ]
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all_self_efa"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node EFA"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_all_self_efa"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node EFA"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "ex-eks"
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.29"
        }
    }

[1m  # module.key_pair.aws_key_pair.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_key_pair" "this" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m fingerprint     = (known after apply)
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m key_name        = (known after apply)
      [32m+[0m[0m key_name_prefix = "ex-eks"
      [32m+[0m[0m key_pair_id     = (known after apply)
      [32m+[0m[0m key_type        = (known after apply)
      [32m+[0m[0m public_key      = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
    }

[1m  # module.key_pair.tls_private_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "tls_private_key" "this" {
      [32m+[0m[0m algorithm                     = "RSA"
      [32m+[0m[0m ecdsa_curve                   = "P224"
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m private_key_openssh           = (sensitive value)
      [32m+[0m[0m private_key_pem               = (sensitive value)
      [32m+[0m[0m private_key_pem_pkcs8         = (sensitive value)
      [32m+[0m[0m public_key_fingerprint_md5    = (known after apply)
      [32m+[0m[0m public_key_fingerprint_sha256 = (known after apply)
      [32m+[0m[0m public_key_openssh            = (known after apply)
      [32m+[0m[0m public_key_pem                = (known after apply)
      [32m+[0m[0m rsa_bits                      = 4096
    }

[1m  # module.vpc.aws_default_network_acl.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_network_acl" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_network_acl_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m egress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }
    }

[1m  # module.vpc.aws_default_route_table.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_route_table" "default" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_route_table_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m route                  = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.vpc.aws_default_security_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-default"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_egress_only_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_egress_only_internet_gateway" "this" {
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-us-east-1a"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-us-east-1a"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-us-east-1a"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-us-east-1a"
        }
    }

[1m  # module.vpc.aws_route.private_dns64_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_dns64_nat_gateway" {
      [32m+[0m[0m destination_ipv6_cidr_block = "64:ff9b::/96"
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m instance_id                 = (known after apply)
      [32m+[0m[0m instance_owner_id           = (known after apply)
      [32m+[0m[0m nat_gateway_id              = (known after apply)
      [32m+[0m[0m network_interface_id        = (known after apply)
      [32m+[0m[0m origin                      = (known after apply)
      [32m+[0m[0m route_table_id              = (known after apply)
      [32m+[0m[0m state                       = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.private_ipv6_egress[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_ipv6_egress" {
      [32m+[0m[0m destination_ipv6_cidr_block = "::/0"
      [32m+[0m[0m egress_only_gateway_id      = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m instance_id                 = (known after apply)
      [32m+[0m[0m instance_owner_id           = (known after apply)
      [32m+[0m[0m network_interface_id        = (known after apply)
      [32m+[0m[0m origin                      = (known after apply)
      [32m+[0m[0m route_table_id              = (known after apply)
      [32m+[0m[0m state                       = (known after apply)
    }

[1m  # module.vpc.aws_route.private_ipv6_egress[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_ipv6_egress" {
      [32m+[0m[0m destination_ipv6_cidr_block = "::/0"
      [32m+[0m[0m egress_only_gateway_id      = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m instance_id                 = (known after apply)
      [32m+[0m[0m instance_owner_id           = (known after apply)
      [32m+[0m[0m network_interface_id        = (known after apply)
      [32m+[0m[0m origin                      = (known after apply)
      [32m+[0m[0m route_table_id              = (known after apply)
      [32m+[0m[0m state                       = (known after apply)
    }

[1m  # module.vpc.aws_route.private_ipv6_egress[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_ipv6_egress" {
      [32m+[0m[0m destination_ipv6_cidr_block = "::/0"
      [32m+[0m[0m egress_only_gateway_id      = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m instance_id                 = (known after apply)
      [32m+[0m[0m instance_owner_id           = (known after apply)
      [32m+[0m[0m network_interface_id        = (known after apply)
      [32m+[0m[0m origin                      = (known after apply)
      [32m+[0m[0m route_table_id              = (known after apply)
      [32m+[0m[0m state                       = (known after apply)
    }

[1m  # module.vpc.aws_route.private_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway_ipv6[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway_ipv6" {
      [32m+[0m[0m destination_ipv6_cidr_block = "::/0"
      [32m+[0m[0m gateway_id                  = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m instance_id                 = (known after apply)
      [32m+[0m[0m instance_owner_id           = (known after apply)
      [32m+[0m[0m network_interface_id        = (known after apply)
      [32m+[0m[0m origin                      = (known after apply)
      [32m+[0m[0m route_table_id              = (known after apply)
      [32m+[0m[0m state                       = (known after apply)
    }

[1m  # module.vpc.aws_route_table.intra[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "intra" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-private"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-private"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-public"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-public"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.intra[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "intra" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.intra[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "intra" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.intra[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "intra" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.intra[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "intra" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.52.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1a"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1a"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.intra[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "intra" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.53.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1b"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1b"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.intra[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "intra" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.54.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1c"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks-intra-us-east-1c"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/20"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1a"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1a"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.16.0/20"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1b"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1b"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.32.0/20"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1c"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                         = "ex-eks"
          [32m+[0m[0m "GithubOrg"                       = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                      = "terraform-aws-eks"
          [32m+[0m[0m "Name"                            = "ex-eks-private-us-east-1c"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.48.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1a"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1a"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.49.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1b"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1b"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = true
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.50.0/24"
      [32m+[0m[0m enable_dns64                                   = true
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = true
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                                = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1c"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Example"                = "ex-eks"
          [32m+[0m[0m "GithubOrg"              = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"             = "terraform-aws-eks"
          [32m+[0m[0m "Name"                   = "ex-eks-public-us-east-1c"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m assign_generated_ipv6_cidr_block     = true
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "ex-eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2023_x86_64_STANDARD"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "al2023_nodeadm-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = "1.29.0-20240307"
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "al2023_nodeadm"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "al2023_nodeadm"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "al2023_nodeadm-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for al2023_nodeadm EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "al2023_nodeadm-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "al2023_nodeadm"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "al2023_nodeadm"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "al2023_nodeadm"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "BOTTLEROCKET_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "bottlerocket_add-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = "1.19.2-29cc92cc"
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_add"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_add"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "bottlerocket_add-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for bottlerocket_add EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "bottlerocket_add-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = "IyBleHRyYSBhcmdzIGFkZGVkCltzZXR0aW5ncy5rZXJuZWxdCmxvY2tkb3duID0gImludGVncml0eSIK"
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_add"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_add"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_add"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "bottlerocket_custom-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_custom"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_custom"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "bottlerocket_custom-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for bottlerocket_custom EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m image_id               = "ami-0f623fc60e44e28fc"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "bottlerocket_custom-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = (known after apply)
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_custom"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_custom"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "bottlerocket_custom"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "BOTTLEROCKET_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "bottlerocket_default-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_default"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "bottlerocket_default"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "bottlerocket_default-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m force_update_version   = true
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "complete-eks-mng-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "ExtraTag"   = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "complete-eks-mng"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "ExtraTag"   = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "complete-eks-mng"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 7
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m taint {
          [32m+[0m[0m effect = "NO_SCHEDULE"
          [32m+[0m[0m key    = "dedicated"
          [32m+[0m[0m value  = "gpuGroup"
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group complete example role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "eks-managed-node-group-complete-example"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "ExtraTag"   = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Purpose"    = "Protector of the kubelet"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "ExtraTag"   = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Purpose"    = "Protector of the kubelet"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role_policy_attachment.additional["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "eks-managed-node-group-complete-example"
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role_policy_attachment.additional["additional"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = "eks-managed-node-group-complete-example"
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = "eks-managed-node-group-complete-example"
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = "eks-managed-node-group-complete-example"
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = "eks-managed-node-group-complete-example"
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                     = (known after apply)
      [32m+[0m[0m default_version         = (known after apply)
      [32m+[0m[0m description             = "Custom launch template for complete-eks-mng EKS managed node group"
      [32m+[0m[0m disable_api_termination = false
      [32m+[0m[0m ebs_optimized           = "true"
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m image_id                = "ami-0b047bdfc83a5c3f4"
      [32m+[0m[0m latest_version          = (known after apply)
      [32m+[0m[0m name                    = (known after apply)
      [32m+[0m[0m name_prefix             = "complete-"
      [32m+[0m[0m tags                    = {
          [32m+[0m[0m "Example"                           = "ex-eks"
          [32m+[0m[0m "ExtraTag"                          = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"                         = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                        = "terraform-aws-eks"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled" = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/ex-eks"  = "owned"
        }
      [32m+[0m[0m tags_all                = {
          [32m+[0m[0m "Example"                           = "ex-eks"
          [32m+[0m[0m "ExtraTag"                          = "EKS managed node group complete example"
          [32m+[0m[0m "GithubOrg"                         = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"                        = "terraform-aws-eks"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled" = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/ex-eks"  = "owned"
        }
      [32m+[0m[0m update_default_version  = true
      [32m+[0m[0m user_data               = (known after apply)
      [32m+[0m[0m vpc_security_group_ids  = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = "disabled"
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"                           = "ex-eks"
              [32m+[0m[0m "ExtraTag"                          = "EKS managed node group complete example"
              [32m+[0m[0m "GithubOrg"                         = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo"                        = "terraform-aws-eks"
              [32m+[0m[0m "Name"                              = "complete-eks-mng"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled" = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/ex-eks"  = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"                           = "ex-eks"
              [32m+[0m[0m "ExtraTag"                          = "EKS managed node group complete example"
              [32m+[0m[0m "GithubOrg"                         = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo"                        = "terraform-aws-eks"
              [32m+[0m[0m "Name"                              = "complete-eks-mng"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled" = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/ex-eks"  = "owned"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"                           = "ex-eks"
              [32m+[0m[0m "ExtraTag"                          = "EKS managed node group complete example"
              [32m+[0m[0m "GithubOrg"                         = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo"                        = "terraform-aws-eks"
              [32m+[0m[0m "Name"                              = "complete-eks-mng"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled" = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/ex-eks"  = "owned"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t4g.medium",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "custom_ami-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "custom_ami"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "custom_ami"
        }
      [32m+[0m[0m version                = (known after apply)

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "custom_ami-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for custom_ami EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m image_id               = "ami-001e0a4de4c601f93"
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "custom_ami-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m user_data              = (known after apply)
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "custom_ami"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "custom_ami"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Example"    = "ex-eks"
              [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
              [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
              [32m+[0m[0m "Name"       = "custom_ami"
            }
        }
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = (known after apply)
      [32m+[0m[0m cluster_name           = "ex-eks"
      [32m+[0m[0m disk_size              = 50
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "m6i.large",
          [32m+[0m[0m "m5.large",
          [32m+[0m[0m "m5n.large",
          [32m+[0m[0m "m5zn.large",
        ]
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "default_node_group-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "default_node_group"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
          [32m+[0m[0m "Name"       = "default_node_group"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 3
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "default_node_group-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Example"    = "ex-eks"
          [32m+[0m[0m "GithubOrg"  = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo" = "terraform-aws-eks"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_IPv6_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::301261400751:policy/AmazonEKS_CNI_IPv6_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "Default"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:root",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:ImportKeyMaterial",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:ReplicateKey",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::301261400751:user/ddevops",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/ex-eks"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "ex-eks cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Example"               = "ex-eks"
          [32m+[0m[0m "GithubOrg"             = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"            = "terraform-aws-eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Example"               = "ex-eks"
          [32m+[0m[0m "GithubOrg"             = "terraform-aws-modules"
          [32m+[0m[0m "GithubRepo"            = "terraform-aws-eks"
          [32m+[0m[0m "terraform-aws-modules" = "eks"
        }
    }

[1m  # module.eks.module.eks_managed_node_group["al2023_nodeadm"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_add"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_custom"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["bottlerocket_default"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["complete"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["custom_ami"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["default_node_group"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["efa"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 134 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
